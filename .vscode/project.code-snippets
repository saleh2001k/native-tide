{
  "View": {
    "prefix": "v",
    "body": ["<View style={styles.container}>", "  $1", "</View>"],
    "description": "A Simple View with Unistyles",
  },
  "Text": {
    "prefix": "t",
    "body": ["<Text variant=\"body\" style={styles.text}>", "  $1", "</Text>"],
    "description": "A Simple Text with Unistyles",
  },
  "export *": {
    "prefix": "ex *",
    "body": ["export * from '.$1';"],
    "description": "export *",
  },
  "Component": {
    "prefix": "comp",
    "body": [
      "import * as React from 'react';",
      "import { createStyleSheet, useStyles } from 'react-native-unistyles';",
      "",
      "import { Text, View } from '@/components/ui';",
      "",
      "type Props = {",
      "  $2",
      "};",
      "",
      "export const ${1:CompName} = ({}: Props) => {",
      "  const { styles } = useStyles(stylesheet);",
      "",
      "  return (",
      "    <View style={styles.container}>",
      "      <Text style={styles.text}>${1:CompName} Component</Text>",
      "    </View>",
      "  );",
      "};",
      "",
      "const stylesheet = createStyleSheet((theme) => ({",
      "  container: {",
      "    flex: 1,",
      "    backgroundColor: theme.colors.background,",
      "  },",
      "  text: {",
      "    fontSize: theme.typography.size.md,",
      "    color: theme.colors.text,",
      "  },",
      "}));",
      "",
    ],
    "description": "Component with Unistyles",
  },
  "Screen": {
    "prefix": "screen",
    "body": [
      "import * as React from 'react';",
      "import { createStyleSheet, useStyles } from 'react-native-unistyles';",
      "",
      "import { Screen, Text, View } from '@/components/ui';",
      "",
      "export default function ${1:ScreenName}Screen() {",
      "  const { styles } = useStyles(stylesheet);",
      "",
      "  return (",
      "    <Screen style={styles.screen}>",
      "      <View style={styles.container}>",
      "        <Text style={styles.title}>${1:ScreenName}</Text>",
      "      </View>",
      "    </Screen>",
      "  );",
      "}",
      "",
      "const stylesheet = createStyleSheet((theme) => ({",
      "  screen: {",
      "    flex: 1,",
      "    backgroundColor: theme.colors.background,",
      "  },",
      "  container: {",
      "    flex: 1,",
      "    padding: theme.spacing.md,",
      "    justifyContent: 'center',",
      "    alignItems: 'center',",
      "  },",
      "  title: {",
      "    fontSize: theme.typography.size.xl,",
      "    fontWeight: 'bold',",
      "    color: theme.colors.text,",
      "    marginBottom: theme.spacing.lg,",
      "  },",
      "}));",
      "",
    ],
    "description": "Screen Component with Unistyles",
  },
  "useQuery with variables": {
    "prefix": "useqv",
    "body": [
      "import type { AxiosError } from 'axios';",
      "import { createQuery } from 'react-query-kit';",
      "",
      "import { client } from '../common';",
      "",
      "type Variables = {$3};",
      "type Response = {$4};",
      "",
      "export const use$1 = createQuery<Response, Variables, AxiosError>({",
      "  queryKey: ['$2'], ",
      "  fetcher: (variables) => {",
      "    return client",
      "      .get(`$2/\\${variables.${5}}`)",
      "      .then((response) => response.data);",
      "  },",
      "});",
      "",
    ],
    "description": "useQuery with variables",
  },
  "useQuery": {
    "prefix": "useq",
    "body": [
      "import type { AxiosError } from 'axios';",
      "import { createQuery } from 'react-query-kit';",
      "",
      "import { client } from '../common';",
      "",
      "type Response = {$3};",
      "type Variables = void;",
      "",
      "export const use$1 = createQuery<Response, Variables, AxiosError>({",
      "  queryKey: ['$2'],",
      "  fetcher: () => {",
      "    return client.get(`$2`).then((response) => response.data.posts);",
      "  },",
      "});",
      "",
    ],
    "description": "useQuery",
  },
  "useInfiniteQuery": {
    "prefix": "useiq",
    "body": [
      "import type { AxiosError } from 'axios';",
      "import { createInfiniteQuery } from 'react-query-kit';",
      "",
      "import { client } from '../common/client';",
      "import { DEFAULT_LIMIT, getNextPageParam } from '../common/utils';",
      "import type { PaginateQuery } from '../types';",
      "",
      "type Response = void;",
      "type Variables = PaginateQuery<$3>;",
      "",
      "export const use$1 = createInfiniteQuery<Response, Variables, AxiosError>({",
      "  queryKey: ['$2'],",
      "  fetcher: (_variables: any, { pageParam }): Promise<Response> => {",
      "    return client({",
      "      url: `/$2/`,",
      "      method: 'GET',",
      "      params: {",
      "        limit: DEFAULT_LIMIT,",
      "        offset: pageParam,",
      "      },",
      "    }).then((response) => response.data);",
      "  },",
      "  getNextPageParam,",
      "  initialPageParam: 0,",
      "});",
    ],
    "description": "useInfiniteQuery",
  },
  "useMutation ": {
    "prefix": "usem",
    "body": [
      "import type { AxiosError } from 'axios';",
      "import { createMutation } from 'react-query-kit';",
      "",
      "import { client } from '../common';",
      "",
      "type Variables = {$3};",
      "type Response = {$4};",
      "",
      "export const use$1 = createMutation<Response, Variables, AxiosError>({",
      "  mutationFn: async (variables) =>",
      "    client({",
      "      url: '$2',",
      "      method: 'POST',",
      "      data: variables,",
      "    }).then((response) => response.data)",
      "});",
    ],
    "description": "useMutation ",
  },
  "navigate": {
    "prefix": "navigate",
    "body": ["const { navigate } = useNavigation();", ""],
    "description": "navigate",
  },
  "createStyleSheet": {
    "prefix": "styles",
    "body": [
      "const stylesheet = createStyleSheet((theme) => ({",
      "  $1container: {",
      "    flex: 1,",
      "    backgroundColor: theme.colors.background,",
      "    padding: theme.spacing.md,",
      "  },",
      "}));",
      "",
    ],
    "description": "Create a stylesheet with Unistyles",
  },
  "log": {
    "prefix": "log",
    "body": ["console.log('$1');"],
    "description": "log",
  },
}
